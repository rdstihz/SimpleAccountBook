// Code generated by Kitex v0.4.4. DO NOT EDIT.

package accountservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	account "github.com/rdstihz/SimpleAccountBook/kitex_gen/account"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateAccount(ctx context.Context, Req *account.CreateAccountRequest, callOptions ...callopt.Option) (r *account.CreateAccountResponse, err error)
	DeleteAccount(ctx context.Context, Req *account.DeleteAccountRequest, callOptions ...callopt.Option) (r *account.DeleteAccountResponse, err error)
	UpdateAccount(ctx context.Context, Req *account.UpdateAccountRequest, callOptions ...callopt.Option) (r *account.UpdateAccountResponse, err error)
	MGetAccount(ctx context.Context, Req *account.MGetAccountRequest, callOptions ...callopt.Option) (r *account.MGetAccountResponse, err error)
	GetAccountByUserID(ctx context.Context, Req *account.GetAccountByUserIDRequest, callOptions ...callopt.Option) (r *account.GetAccountByUserIDResponse, err error)
	CreateBill(ctx context.Context, Req *account.CreateBillRequest, callOptions ...callopt.Option) (r *account.CreateBillResponse, err error)
	DeleteBill(ctx context.Context, Req *account.DeleteBillRequest, callOptions ...callopt.Option) (r *account.DeleteBillResponse, err error)
	UpdateBill(ctx context.Context, Req *account.UpdateBillRequest, callOptions ...callopt.Option) (r *account.UpdateBillResponse, err error)
	MGetGillRequest(ctx context.Context, Req *account.MGetBillRequest, callOptions ...callopt.Option) (r *account.MGetBillResponse, err error)
	GetBillByAccountID(ctx context.Context, Req *account.GetBillByAccountIDRequest, callOptions ...callopt.Option) (r *account.GetBillByAccountIDResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kAccountServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAccountServiceClient struct {
	*kClient
}

func (p *kAccountServiceClient) CreateAccount(ctx context.Context, Req *account.CreateAccountRequest, callOptions ...callopt.Option) (r *account.CreateAccountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateAccount(ctx, Req)
}

func (p *kAccountServiceClient) DeleteAccount(ctx context.Context, Req *account.DeleteAccountRequest, callOptions ...callopt.Option) (r *account.DeleteAccountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteAccount(ctx, Req)
}

func (p *kAccountServiceClient) UpdateAccount(ctx context.Context, Req *account.UpdateAccountRequest, callOptions ...callopt.Option) (r *account.UpdateAccountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateAccount(ctx, Req)
}

func (p *kAccountServiceClient) MGetAccount(ctx context.Context, Req *account.MGetAccountRequest, callOptions ...callopt.Option) (r *account.MGetAccountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetAccount(ctx, Req)
}

func (p *kAccountServiceClient) GetAccountByUserID(ctx context.Context, Req *account.GetAccountByUserIDRequest, callOptions ...callopt.Option) (r *account.GetAccountByUserIDResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAccountByUserID(ctx, Req)
}

func (p *kAccountServiceClient) CreateBill(ctx context.Context, Req *account.CreateBillRequest, callOptions ...callopt.Option) (r *account.CreateBillResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateBill(ctx, Req)
}

func (p *kAccountServiceClient) DeleteBill(ctx context.Context, Req *account.DeleteBillRequest, callOptions ...callopt.Option) (r *account.DeleteBillResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteBill(ctx, Req)
}

func (p *kAccountServiceClient) UpdateBill(ctx context.Context, Req *account.UpdateBillRequest, callOptions ...callopt.Option) (r *account.UpdateBillResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateBill(ctx, Req)
}

func (p *kAccountServiceClient) MGetGillRequest(ctx context.Context, Req *account.MGetBillRequest, callOptions ...callopt.Option) (r *account.MGetBillResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetGillRequest(ctx, Req)
}

func (p *kAccountServiceClient) GetBillByAccountID(ctx context.Context, Req *account.GetBillByAccountIDRequest, callOptions ...callopt.Option) (r *account.GetBillByAccountIDResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetBillByAccountID(ctx, Req)
}
