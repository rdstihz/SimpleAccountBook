// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package account

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Account) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Account[number], err)
}

func (x *Account) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AccountId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Account) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AccountName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Account) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Balance, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Bill) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Bill[number], err)
}

func (x *Bill) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.BillId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Bill) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Bill) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AccountId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Bill) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Bill) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Amount, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Bill) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Category, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Bill) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Comment, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseResp[number], err)
}

func (x *BaseResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusMessage, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateAccountRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateAccountRequest[number], err)
}

func (x *CreateAccountRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateAccountRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AccountName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateAccountRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Balance, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CreateAccountResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateAccountResponse[number], err)
}

func (x *CreateAccountResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *DeleteAccountRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteAccountRequest[number], err)
}

func (x *DeleteAccountRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AccountId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteAccountResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteAccountResponse[number], err)
}

func (x *DeleteAccountResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *UpdateAccountRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateAccountRequest[number], err)
}

func (x *UpdateAccountRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AccountId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateAccountRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AccountName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateAccountRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Balance, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *UpdateAccountResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateAccountResponse[number], err)
}

func (x *UpdateAccountResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *MGetAccountRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MGetAccountRequest[number], err)
}

func (x *MGetAccountRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.AccountIds = append(x.AccountIds, v)
			return offset, err
		})
	return offset, err
}

func (x *MGetAccountResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MGetAccountResponse[number], err)
}

func (x *MGetAccountResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Account
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Accounts = append(x.Accounts, &v)
	return offset, nil
}

func (x *MGetAccountResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *GetAccountByUserIDRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAccountByUserIDRequest[number], err)
}

func (x *GetAccountByUserIDRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetAccountByUserIDResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAccountByUserIDResponse[number], err)
}

func (x *GetAccountByUserIDResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Account
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Accounts = append(x.Accounts, &v)
	return offset, nil
}

func (x *GetAccountByUserIDResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *CreateBillRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateBillRequest[number], err)
}

func (x *CreateBillRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Bill
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Bill = &v
	return offset, nil
}

func (x *CreateBillResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateBillResponse[number], err)
}

func (x *CreateBillResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *DeleteBillRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteBillRequest[number], err)
}

func (x *DeleteBillRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.BillId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteBillResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteBillResponse[number], err)
}

func (x *DeleteBillResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *UpdateBillRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateBillRequest[number], err)
}

func (x *UpdateBillRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Bill
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Bill = &v
	return offset, nil
}

func (x *UpdateBillResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateBillResponse[number], err)
}

func (x *UpdateBillResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *MGetBillRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MGetBillRequest[number], err)
}

func (x *MGetBillRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.BillIds = append(x.BillIds, v)
			return offset, err
		})
	return offset, err
}

func (x *MGetBillResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MGetBillResponse[number], err)
}

func (x *MGetBillResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Bill
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Bills = append(x.Bills, &v)
	return offset, nil
}

func (x *MGetBillResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *GetBillByAccountIDRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetBillByAccountIDRequest[number], err)
}

func (x *GetBillByAccountIDRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AccountId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetBillByAccountIDResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetBillByAccountIDResponse[number], err)
}

func (x *GetBillByAccountIDResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Bill
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Bills = append(x.Bills, &v)
	return offset, nil
}

func (x *GetBillByAccountIDResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *Account) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Account) fastWriteField1(buf []byte) (offset int) {
	if x.AccountId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.AccountId)
	return offset
}

func (x *Account) fastWriteField2(buf []byte) (offset int) {
	if x.AccountName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.AccountName)
	return offset
}

func (x *Account) fastWriteField3(buf []byte) (offset int) {
	if x.Balance == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, x.Balance)
	return offset
}

func (x *Bill) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *Bill) fastWriteField1(buf []byte) (offset int) {
	if x.BillId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.BillId)
	return offset
}

func (x *Bill) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.UserId)
	return offset
}

func (x *Bill) fastWriteField3(buf []byte) (offset int) {
	if x.AccountId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.AccountId)
	return offset
}

func (x *Bill) fastWriteField4(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.Type)
	return offset
}

func (x *Bill) fastWriteField5(buf []byte) (offset int) {
	if x.Amount == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 5, x.Amount)
	return offset
}

func (x *Bill) fastWriteField6(buf []byte) (offset int) {
	if x.Category == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.Category)
	return offset
}

func (x *Bill) fastWriteField7(buf []byte) (offset int) {
	if x.Comment == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.Comment)
	return offset
}

func (x *BaseResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *BaseResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.StatusCode)
	return offset
}

func (x *BaseResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMessage == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.StatusMessage)
	return offset
}

func (x *CreateAccountRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CreateAccountRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.UserId)
	return offset
}

func (x *CreateAccountRequest) fastWriteField2(buf []byte) (offset int) {
	if x.AccountName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.AccountName)
	return offset
}

func (x *CreateAccountRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Balance == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, x.Balance)
	return offset
}

func (x *CreateAccountResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateAccountResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.BaseResp)
	return offset
}

func (x *DeleteAccountRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteAccountRequest) fastWriteField1(buf []byte) (offset int) {
	if x.AccountId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.AccountId)
	return offset
}

func (x *DeleteAccountResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteAccountResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.BaseResp)
	return offset
}

func (x *UpdateAccountRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UpdateAccountRequest) fastWriteField1(buf []byte) (offset int) {
	if x.AccountId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.AccountId)
	return offset
}

func (x *UpdateAccountRequest) fastWriteField2(buf []byte) (offset int) {
	if x.AccountName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.AccountName)
	return offset
}

func (x *UpdateAccountRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Balance == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, x.Balance)
	return offset
}

func (x *UpdateAccountResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateAccountResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.BaseResp)
	return offset
}

func (x *MGetAccountRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *MGetAccountRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.AccountIds) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.AccountIds),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.AccountIds[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *MGetAccountResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *MGetAccountResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Accounts == nil {
		return offset
	}
	for i := range x.Accounts {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.Accounts[i])
	}
	return offset
}

func (x *MGetAccountResponse) fastWriteField2(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.BaseResp)
	return offset
}

func (x *GetAccountByUserIDRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetAccountByUserIDRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.UserId)
	return offset
}

func (x *GetAccountByUserIDResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetAccountByUserIDResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Accounts == nil {
		return offset
	}
	for i := range x.Accounts {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.Accounts[i])
	}
	return offset
}

func (x *GetAccountByUserIDResponse) fastWriteField2(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.BaseResp)
	return offset
}

func (x *CreateBillRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateBillRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Bill == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Bill)
	return offset
}

func (x *CreateBillResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateBillResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.BaseResp)
	return offset
}

func (x *DeleteBillRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteBillRequest) fastWriteField1(buf []byte) (offset int) {
	if x.BillId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.BillId)
	return offset
}

func (x *DeleteBillResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteBillResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.BaseResp)
	return offset
}

func (x *UpdateBillRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateBillRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Bill == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Bill)
	return offset
}

func (x *UpdateBillResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateBillResponse) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.BaseResp)
	return offset
}

func (x *MGetBillRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *MGetBillRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.BillIds) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.BillIds),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.BillIds[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *MGetBillResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *MGetBillResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Bills == nil {
		return offset
	}
	for i := range x.Bills {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.Bills[i])
	}
	return offset
}

func (x *MGetBillResponse) fastWriteField2(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.BaseResp)
	return offset
}

func (x *GetBillByAccountIDRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetBillByAccountIDRequest) fastWriteField1(buf []byte) (offset int) {
	if x.AccountId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.AccountId)
	return offset
}

func (x *GetBillByAccountIDResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetBillByAccountIDResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Bills == nil {
		return offset
	}
	for i := range x.Bills {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.Bills[i])
	}
	return offset
}

func (x *GetBillByAccountIDResponse) fastWriteField2(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.BaseResp)
	return offset
}

func (x *Account) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Account) sizeField1() (n int) {
	if x.AccountId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.AccountId)
	return n
}

func (x *Account) sizeField2() (n int) {
	if x.AccountName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.AccountName)
	return n
}

func (x *Account) sizeField3() (n int) {
	if x.Balance == 0 {
		return n
	}
	n += fastpb.SizeDouble(3, x.Balance)
	return n
}

func (x *Bill) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *Bill) sizeField1() (n int) {
	if x.BillId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.BillId)
	return n
}

func (x *Bill) sizeField2() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.UserId)
	return n
}

func (x *Bill) sizeField3() (n int) {
	if x.AccountId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.AccountId)
	return n
}

func (x *Bill) sizeField4() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.Type)
	return n
}

func (x *Bill) sizeField5() (n int) {
	if x.Amount == 0 {
		return n
	}
	n += fastpb.SizeDouble(5, x.Amount)
	return n
}

func (x *Bill) sizeField6() (n int) {
	if x.Category == "" {
		return n
	}
	n += fastpb.SizeString(6, x.Category)
	return n
}

func (x *Bill) sizeField7() (n int) {
	if x.Comment == "" {
		return n
	}
	n += fastpb.SizeString(7, x.Comment)
	return n
}

func (x *BaseResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *BaseResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.StatusCode)
	return n
}

func (x *BaseResp) sizeField2() (n int) {
	if x.StatusMessage == "" {
		return n
	}
	n += fastpb.SizeString(2, x.StatusMessage)
	return n
}

func (x *CreateAccountRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CreateAccountRequest) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.UserId)
	return n
}

func (x *CreateAccountRequest) sizeField2() (n int) {
	if x.AccountName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.AccountName)
	return n
}

func (x *CreateAccountRequest) sizeField3() (n int) {
	if x.Balance == 0 {
		return n
	}
	n += fastpb.SizeDouble(3, x.Balance)
	return n
}

func (x *CreateAccountResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateAccountResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.BaseResp)
	return n
}

func (x *DeleteAccountRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteAccountRequest) sizeField1() (n int) {
	if x.AccountId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.AccountId)
	return n
}

func (x *DeleteAccountResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteAccountResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.BaseResp)
	return n
}

func (x *UpdateAccountRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UpdateAccountRequest) sizeField1() (n int) {
	if x.AccountId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.AccountId)
	return n
}

func (x *UpdateAccountRequest) sizeField2() (n int) {
	if x.AccountName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.AccountName)
	return n
}

func (x *UpdateAccountRequest) sizeField3() (n int) {
	if x.Balance == 0 {
		return n
	}
	n += fastpb.SizeDouble(3, x.Balance)
	return n
}

func (x *UpdateAccountResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateAccountResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.BaseResp)
	return n
}

func (x *MGetAccountRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *MGetAccountRequest) sizeField1() (n int) {
	if len(x.AccountIds) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.AccountIds),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.AccountIds[numIdxOrVal])
			return n
		})
	return n
}

func (x *MGetAccountResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *MGetAccountResponse) sizeField1() (n int) {
	if x.Accounts == nil {
		return n
	}
	for i := range x.Accounts {
		n += fastpb.SizeMessage(1, x.Accounts[i])
	}
	return n
}

func (x *MGetAccountResponse) sizeField2() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.BaseResp)
	return n
}

func (x *GetAccountByUserIDRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetAccountByUserIDRequest) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.UserId)
	return n
}

func (x *GetAccountByUserIDResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetAccountByUserIDResponse) sizeField1() (n int) {
	if x.Accounts == nil {
		return n
	}
	for i := range x.Accounts {
		n += fastpb.SizeMessage(1, x.Accounts[i])
	}
	return n
}

func (x *GetAccountByUserIDResponse) sizeField2() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.BaseResp)
	return n
}

func (x *CreateBillRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateBillRequest) sizeField1() (n int) {
	if x.Bill == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Bill)
	return n
}

func (x *CreateBillResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateBillResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.BaseResp)
	return n
}

func (x *DeleteBillRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteBillRequest) sizeField1() (n int) {
	if x.BillId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.BillId)
	return n
}

func (x *DeleteBillResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteBillResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.BaseResp)
	return n
}

func (x *UpdateBillRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateBillRequest) sizeField1() (n int) {
	if x.Bill == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Bill)
	return n
}

func (x *UpdateBillResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateBillResponse) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.BaseResp)
	return n
}

func (x *MGetBillRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *MGetBillRequest) sizeField1() (n int) {
	if len(x.BillIds) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.BillIds),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.BillIds[numIdxOrVal])
			return n
		})
	return n
}

func (x *MGetBillResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *MGetBillResponse) sizeField1() (n int) {
	if x.Bills == nil {
		return n
	}
	for i := range x.Bills {
		n += fastpb.SizeMessage(1, x.Bills[i])
	}
	return n
}

func (x *MGetBillResponse) sizeField2() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.BaseResp)
	return n
}

func (x *GetBillByAccountIDRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetBillByAccountIDRequest) sizeField1() (n int) {
	if x.AccountId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.AccountId)
	return n
}

func (x *GetBillByAccountIDResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetBillByAccountIDResponse) sizeField1() (n int) {
	if x.Bills == nil {
		return n
	}
	for i := range x.Bills {
		n += fastpb.SizeMessage(1, x.Bills[i])
	}
	return n
}

func (x *GetBillByAccountIDResponse) sizeField2() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.BaseResp)
	return n
}

var fieldIDToName_Account = map[int32]string{
	1: "AccountId",
	2: "AccountName",
	3: "Balance",
}

var fieldIDToName_Bill = map[int32]string{
	1: "BillId",
	2: "UserId",
	3: "AccountId",
	4: "Type",
	5: "Amount",
	6: "Category",
	7: "Comment",
}

var fieldIDToName_BaseResp = map[int32]string{
	1: "StatusCode",
	2: "StatusMessage",
}

var fieldIDToName_CreateAccountRequest = map[int32]string{
	1: "UserId",
	2: "AccountName",
	3: "Balance",
}

var fieldIDToName_CreateAccountResponse = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_DeleteAccountRequest = map[int32]string{
	1: "AccountId",
}

var fieldIDToName_DeleteAccountResponse = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_UpdateAccountRequest = map[int32]string{
	1: "AccountId",
	2: "AccountName",
	3: "Balance",
}

var fieldIDToName_UpdateAccountResponse = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_MGetAccountRequest = map[int32]string{
	1: "AccountIds",
}

var fieldIDToName_MGetAccountResponse = map[int32]string{
	1: "Accounts",
	2: "BaseResp",
}

var fieldIDToName_GetAccountByUserIDRequest = map[int32]string{
	1: "UserId",
}

var fieldIDToName_GetAccountByUserIDResponse = map[int32]string{
	1: "Accounts",
	2: "BaseResp",
}

var fieldIDToName_CreateBillRequest = map[int32]string{
	1: "Bill",
}

var fieldIDToName_CreateBillResponse = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_DeleteBillRequest = map[int32]string{
	1: "BillId",
}

var fieldIDToName_DeleteBillResponse = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_UpdateBillRequest = map[int32]string{
	1: "Bill",
}

var fieldIDToName_UpdateBillResponse = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_MGetBillRequest = map[int32]string{
	1: "BillIds",
}

var fieldIDToName_MGetBillResponse = map[int32]string{
	1: "Bills",
	2: "BaseResp",
}

var fieldIDToName_GetBillByAccountIDRequest = map[int32]string{
	1: "AccountId",
}

var fieldIDToName_GetBillByAccountIDResponse = map[int32]string{
	1: "Bills",
	2: "BaseResp",
}
